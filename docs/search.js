window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "que", "modulename": "que", "kind": "module", "doc": "<p>Module for automating various NationStates operations.</p>\n\n<p>This script provides functions to interact with the NationStates API for automating tasks such as changing nation settings, moving nations to different regions, placing bids on cards, voting in the World Assembly, and endorsing nations.</p>\n\n<p>Functions:</p>\n\n<ul>\n<li>get_env_vars(): Extracts and validates required environment variables.</li>\n<li>check_population(session, nation): Retrieves the population of a nation.</li>\n<li>bid_on_cards(session, env_vars): Places bids on specified cards using provided environment variables.</li>\n<li>change_nation_settings(session, nation, env_vars): Updates a nation's settings with provided environment variables.</li>\n<li>change_nation_flag(session, nation, env_vars): Changes a nation's flag.</li>\n<li>move_to_region(session, nation, env_vars): Moves a nation to a target region.</li>\n<li>endorse_nations(session, endorser_nation, target_nations, password, progress_callback=None): Endorses a list of nations using an endorser nation.</li>\n<li>process_nations(session, nations, env_vars, change_settings, change_flag, move_region, place_bids, progress_callback=None): Processes a list of nations, performing specified actions.</li>\n<li>wa_vote(session, nation_name, assembly, vote_choice): Casts a vote in the World Assembly.</li>\n<li>main(): Main function to orchestrate nation processing.</li>\n</ul>\n"}, {"fullname": "que.logger", "modulename": "que", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger que (WARNING)&gt;"}, {"fullname": "que.get_env_vars", "modulename": "que", "qualname": "get_env_vars", "kind": "function", "doc": "<p>Extracts and validates required environment variables from loaded .env files.</p>\n\n<p>Expected environment variables include:</p>\n\n<ul>\n<li>UA: User agent string for API requests.</li>\n<li>PASSWORD: Nation password.</li>\n<li>EMAIL: Email address associated with the nation.</li>\n<li>NOTIFY: Notification settings.</li>\n<li>PRETITLE: Nation pretitle (requires population &gt;= 250 million).</li>\n<li>SLOGAN: Nation slogan.</li>\n<li>CURRENCY: Nation's currency.</li>\n<li>ANIMAL: National animal.</li>\n<li>DEMONYM_NOUN: Demonym noun.</li>\n<li>DEMONYM_ADJECTIVE: Demonym adjective.</li>\n<li>DEMONYM_PLURAL: Demonym plural.</li>\n<li>CAPITAL: Capital city.</li>\n<li>LEADER: Leader's name.</li>\n<li>FAITH: National faith.</li>\n<li>TARGET_REGION: Target region to move to.</li>\n<li>TARGET_REGION_PASSWORD: Password for the target region (if any).</li>\n<li>FLAG: URL or path to the new flag image.</li>\n</ul>\n\n<p>Optional environment variables for card trading:</p>\n\n<ul>\n<li>CARD_IDS: Comma-separated list of card IDs.</li>\n<li>SEASONS: Comma-separated list of corresponding seasons for the cards.</li>\n<li>PRICES: Comma-separated list of corresponding prices for the cards.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary mapping environment variable names to their values.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>EnvironmentError:</strong>  If any required environment variables are missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.check_population", "modulename": "que", "qualname": "check_population", "kind": "function", "doc": "<p>Retrieves the population of a specified nation from the NationStates API.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nation (str):</strong>  The name of the nation whose population is to be retrieved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The population of the nation, in millions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>, </span><span class=\"param\"><span class=\"n\">nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.bid_on_cards", "modulename": "que", "qualname": "bid_on_cards", "kind": "function", "doc": "<p>Places bids on specified cards using provided environment variables.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>env_vars (dict):</strong>  A dictionary of environment variables, must include 'card_ids', 'seasons', and 'prices'.</li>\n</ul>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful bid placements.</li>\n  <li>Warning: Missing card trading variables.</li>\n  <li>Error: Errors encountered during bid placement.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.change_nation_settings", "modulename": "que", "qualname": "change_nation_settings", "kind": "function", "doc": "<p>Updates a nation's settings with provided environment variables.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nation (str):</strong>  The name of the nation whose settings are to be changed.</li>\n<li><strong>env_vars (dict):</strong>  A dictionary of environment variables containing the new settings.</li>\n</ul>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful settings change.</li>\n  <li>Error: Errors encountered during settings change.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.change_nation_flag", "modulename": "que", "qualname": "change_nation_flag", "kind": "function", "doc": "<p>Changes a nation's flag using the provided flag data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nation (str):</strong>  The name of the nation whose flag is to be changed.</li>\n<li><strong>env_vars (dict):</strong>  A dictionary of environment variables containing the flag information.</li>\n</ul>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful flag change.</li>\n  <li>Error: Errors encountered during flag change.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.move_to_region", "modulename": "que", "qualname": "move_to_region", "kind": "function", "doc": "<p>Moves a nation to a specified target region.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nation (str):</strong>  The name of the nation to move.</li>\n<li><strong>env_vars (dict):</strong>  A dictionary of environment variables containing the target region and password.</li>\n</ul>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful region move.</li>\n  <li>Error: Errors encountered during region move.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.endorse_nations", "modulename": "que", "qualname": "endorse_nations", "kind": "function", "doc": "<p>Endorses a list of target nations using the endorser nation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>endorser_nation (str):</strong>  The nation that will perform the endorsements.</li>\n<li><strong>target_nations (list):</strong>  A list of nations to be endorsed.</li>\n<li><strong>password (str):</strong>  The password for the endorser nation.</li>\n<li><strong>progress_callback (callable, optional):</strong>  Function to call with progress updates.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if endorsements were successful, False otherwise.</p>\n</blockquote>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful endorsements.</li>\n  <li>Error: Errors encountered during endorsements.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">endorser_nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">target_nations</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">progress_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.wa_vote", "modulename": "que", "qualname": "wa_vote", "kind": "function", "doc": "<p>Casts a vote in the World Assembly (WA) on behalf of a nation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nation_name (str):</strong>  The name of the nation casting the vote.</li>\n<li><strong>assembly (str):</strong>  'ga' for General Assembly or 'sc' for Security Council.</li>\n<li><strong>vote_choice (str):</strong>  'for' or 'against'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the vote was successful, False otherwise.</p>\n</blockquote>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Info: Successful vote.</li>\n  <li>Error: Errors encountered during voting.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">nation_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vote_choice</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.process_nations", "modulename": "que", "qualname": "process_nations", "kind": "function", "doc": "<p>Processes a list of nations, performing operations based on provided flags.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>session (NSSession):</strong>  An authenticated NationStates session.</li>\n<li><strong>nations (list):</strong>  A list of nation names to process.</li>\n<li><strong>env_vars (dict):</strong>  A dictionary of environment variables.</li>\n<li><strong>change_settings (bool):</strong>  Whether to change nation settings.</li>\n<li><strong>change_flag (bool):</strong>  Whether to change the nation's flag.</li>\n<li><strong>move_region (bool):</strong>  Whether to move the nation to a target region.</li>\n<li><strong>place_bids (bool):</strong>  Whether to place bids on cards.</li>\n<li><strong>progress_callback (callable, optional):</strong>  A callback function to update progress.</li>\n</ul>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Warning: If unable to log in to a nation.</li>\n  <li>Info: Progress updates.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">nsdotpy</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">NSSession</span>,</span><span class=\"param\">\t<span class=\"n\">nations</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">change_settings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">change_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">move_region</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">place_bids</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">progress_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "que.main", "modulename": "que", "qualname": "main", "kind": "function", "doc": "<p>Main function that orchestrates the processing of nations.</p>\n\n<p>It retrieves environment variables, initializes the session, reads the list of nations,\nand calls process_nations() or endorse_nations() with the appropriate flags.</p>\n\n<h6 id=\"logs\">Logs:</h6>\n\n<blockquote>\n  <ul>\n  <li>Error: Configuration errors or unexpected exceptions.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui", "modulename": "gui", "kind": "module", "doc": "<p>Graphical User Interface (GUI) for interacting with the que.py script using PyQt6.</p>\n\n<p>This module provides a user-friendly interface to process nations in the NationStates game.\nIt offers functionality to change settings, change flags, move to regions, place bids on cards,\nvote in the World Assembly, endorse nations, and manage configuration settings via a GUI.</p>\n"}, {"fullname": "gui.QtHandler", "modulename": "gui", "qualname": "QtHandler", "kind": "class", "doc": "<p>A custom logging handler that emits log records to a PyQt signal.</p>\n\n<p>This handler allows log messages to be displayed in the GUI by emitting them\nthrough a PyQt signal, enabling real-time log updates in the application.</p>\n", "bases": "logging.Handler"}, {"fullname": "gui.QtHandler.__init__", "modulename": "gui", "qualname": "QtHandler.__init__", "kind": "function", "doc": "<p>Initialize the QtHandler with a specific PyQt signal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>signal (pyqtSignal):</strong>  The PyQt signal used to emit log messages.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">signal</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtCore</span><span class=\"o\">.</span><span class=\"n\">pyqtSignal</span></span>)</span>"}, {"fullname": "gui.QtHandler.signal", "modulename": "gui", "qualname": "QtHandler.signal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gui.QtHandler.emit", "modulename": "gui", "qualname": "QtHandler.emit", "kind": "function", "doc": "<p>Emit a log record to the connected PyQt signal.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>record (logging.LogRecord):</strong>  The log record to emit.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow", "modulename": "gui", "qualname": "MainWindow", "kind": "class", "doc": "<p>The main window of the application, providing a GUI for interacting with NationStates operations.</p>\n\n<p>This class sets up the GUI, including tabs for processing puppets, WA voting, endorsement,\nand settings. It handles user interactions, logging, and threading for background operations.</p>\n", "bases": "PyQt6.QtWidgets.QMainWindow"}, {"fullname": "gui.MainWindow.__init__", "modulename": "gui", "qualname": "MainWindow.__init__", "kind": "function", "doc": "<p>Initialize the main window, set up the UI components, and connect signals to slots.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "gui.MainWindow.log_signal", "modulename": "gui", "qualname": "MainWindow.log_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.error_signal", "modulename": "gui", "qualname": "MainWindow.error_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.info_signal", "modulename": "gui", "qualname": "MainWindow.info_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.completion_signal", "modulename": "gui", "qualname": "MainWindow.completion_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.progress_signal", "modulename": "gui", "qualname": "MainWindow.progress_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.endorse_progress_signal", "modulename": "gui", "qualname": "MainWindow.endorse_progress_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.script_finished_signal", "modulename": "gui", "qualname": "MainWindow.script_finished_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.voting_finished_signal", "modulename": "gui", "qualname": "MainWindow.voting_finished_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.endorsement_finished_signal", "modulename": "gui", "qualname": "MainWindow.endorsement_finished_signal", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.script_thread", "modulename": "gui", "qualname": "MainWindow.script_thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[threading.Thread]"}, {"fullname": "gui.MainWindow.selected_file", "modulename": "gui", "qualname": "MainWindow.selected_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "gui.MainWindow.endorse_file", "modulename": "gui", "qualname": "MainWindow.endorse_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "gui.MainWindow.change_settings", "modulename": "gui", "qualname": "MainWindow.change_settings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "gui.MainWindow.change_flag", "modulename": "gui", "qualname": "MainWindow.change_flag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "gui.MainWindow.move_region", "modulename": "gui", "qualname": "MainWindow.move_region", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "gui.MainWindow.place_bids", "modulename": "gui", "qualname": "MainWindow.place_bids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "gui.MainWindow.setup_ui", "modulename": "gui", "qualname": "MainWindow.setup_ui", "kind": "function", "doc": "<p>Set up the user interface elements of the main window.</p>\n\n<p>This method initializes the main widget, creates the tabbed interface,\nsets up each tab, configures logging, and applies stylesheets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.apply_styles", "modulename": "gui", "qualname": "MainWindow.apply_styles", "kind": "function", "doc": "<p>Apply custom stylesheets to enhance the visual appearance of the application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.setup_process_tab", "modulename": "gui", "qualname": "MainWindow.setup_process_tab", "kind": "function", "doc": "<p>Set up the 'Process Puppets' tab with its widgets and layouts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tab (QWidget):</strong>  The widget representing the 'Process Puppets' tab.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tab</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.setup_voting_tab", "modulename": "gui", "qualname": "MainWindow.setup_voting_tab", "kind": "function", "doc": "<p>Set up the 'WA Voting' tab with its widgets and layouts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tab (QWidget):</strong>  The widget representing the 'WA Voting' tab.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tab</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.setup_endorse_tab", "modulename": "gui", "qualname": "MainWindow.setup_endorse_tab", "kind": "function", "doc": "<p>Set up the 'Endorse' tab with its widgets and layouts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tab (QWidget):</strong>  The widget representing the 'Endorse' tab.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tab</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.setup_settings_tab", "modulename": "gui", "qualname": "MainWindow.setup_settings_tab", "kind": "function", "doc": "<p>Set up the 'Settings' tab with input fields to load and save configuration settings.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tab (QWidget):</strong>  The widget representing the 'Settings' tab.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tab</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.browse_flag_file", "modulename": "gui", "qualname": "MainWindow.browse_flag_file", "kind": "function", "doc": "<p>Open a file dialog to select a flag file and update the 'FLAG' field in settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.load_config_file", "modulename": "gui", "qualname": "MainWindow.load_config_file", "kind": "function", "doc": "<p>Open a file dialog to select a configuration file and load the settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.load_settings", "modulename": "gui", "qualname": "MainWindow.load_settings", "kind": "function", "doc": "<p>Load existing settings from 'config.env' and populate the settings fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.save_settings", "modulename": "gui", "qualname": "MainWindow.save_settings", "kind": "function", "doc": "<p>Save the settings to 'config.env' after validating the input fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.setup_logging", "modulename": "gui", "qualname": "MainWindow.setup_logging", "kind": "function", "doc": "<p>Set up logging to both a file and the GUI log window.</p>\n\n<p>This method configures the logging module to output logs to a file and\nto the GUI's log window using a custom QtHandler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.append_log", "modulename": "gui", "qualname": "MainWindow.append_log", "kind": "function", "doc": "<p>Append a log message to the shared log window.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msg (str):</strong>  The log message to append.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.select_file", "modulename": "gui", "qualname": "MainWindow.select_file", "kind": "function", "doc": "<p>Open a file dialog to select a nations file and update the label.</p>\n\n<p>This method allows the user to select a text file containing the list\nof nations to process, and updates the file label accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.select_endorse_file", "modulename": "gui", "qualname": "MainWindow.select_endorse_file", "kind": "function", "doc": "<p>Open a file dialog to select a nations file for endorsement and update the label.</p>\n\n<p>This method allows the user to select a text file containing the list\nof nations to endorse, and updates the file label accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.start_script", "modulename": "gui", "qualname": "MainWindow.start_script", "kind": "function", "doc": "<p>Start the processing script in a separate thread.</p>\n\n<p>This method initiates the processing of nations based on the selected\noptions, disables the relevant UI elements during processing, and\nhandles threading to keep the GUI responsive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.run_script", "modulename": "gui", "qualname": "MainWindow.run_script", "kind": "function", "doc": "<p>Run the main processing script with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>change_settings (bool):</strong>  Whether to change nation settings.</li>\n<li><strong>change_flag (bool):</strong>  Whether to change the nation's flag.</li>\n<li><strong>move_region (bool):</strong>  Whether to move the nation to a target region.</li>\n<li><strong>place_bids (bool):</strong>  Whether to place bids on cards.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">change_settings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">change_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">move_region</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">place_bids</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.update_progress", "modulename": "gui", "qualname": "MainWindow.update_progress", "kind": "function", "doc": "<p>Update the progress bar with the given value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The progress percentage to update.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.set_progress", "modulename": "gui", "qualname": "MainWindow.set_progress", "kind": "function", "doc": "<p>Set the progress bar to a specific value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The progress percentage to set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.script_completed", "modulename": "gui", "qualname": "MainWindow.script_completed", "kind": "function", "doc": "<p>Handle actions upon successful completion of the script.</p>\n\n<p>This method logs the completion, informs the user, and updates the progress bar.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.show_error_message", "modulename": "gui", "qualname": "MainWindow.show_error_message", "kind": "function", "doc": "<p>Display an error message dialog.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>message (str):</strong>  The error message to display.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.show_info_message", "modulename": "gui", "qualname": "MainWindow.show_info_message", "kind": "function", "doc": "<p>Display an information message dialog.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>title (str):</strong>  The title of the message dialog.</li>\n<li><strong>message (str):</strong>  The information message to display.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.on_script_finished", "modulename": "gui", "qualname": "MainWindow.on_script_finished", "kind": "function", "doc": "<p>Slot called when the script thread finishes.</p>\n\n<p>This method re-enables the GUI elements that were disabled during processing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.start_voting", "modulename": "gui", "qualname": "MainWindow.start_voting", "kind": "function", "doc": "<p>Start the World Assembly (WA) voting process in a separate thread.</p>\n\n<p>This method collects user inputs, validates them, disables relevant UI elements,\nand starts the voting process in a new thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.run_voting", "modulename": "gui", "qualname": "MainWindow.run_voting", "kind": "function", "doc": "<p>Run the WA voting process.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nation_name (str):</strong>  The name of the nation casting the vote.</li>\n<li><strong>assembly (str):</strong>  'ga' for General Assembly or 'sc' for Security Council.</li>\n<li><strong>vote_choice (str):</strong>  'for' or 'against' indicating the vote choice.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nation_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">assembly</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vote_choice</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.on_voting_finished", "modulename": "gui", "qualname": "MainWindow.on_voting_finished", "kind": "function", "doc": "<p>Slot called when the voting thread finishes.</p>\n\n<p>This method re-enables the GUI elements that were disabled during voting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.start_endorsement", "modulename": "gui", "qualname": "MainWindow.start_endorsement", "kind": "function", "doc": "<p>Start the endorsement process in a separate thread.</p>\n\n<p>This method collects user inputs, validates them, disables relevant UI elements,\nand starts the endorsement process in a new thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.run_endorsement", "modulename": "gui", "qualname": "MainWindow.run_endorsement", "kind": "function", "doc": "<p>Run the endorsement process.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>endorser_nation (str):</strong>  The name of the nation performing endorsements.</li>\n<li><strong>endorse_file (str):</strong>  Path to the file containing the list of nations to endorse.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">endorser_nation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">endorse_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.on_endorsement_finished", "modulename": "gui", "qualname": "MainWindow.on_endorsement_finished", "kind": "function", "doc": "<p>Slot called when the endorsement thread finishes.</p>\n\n<p>This method re-enables the GUI elements that were disabled during endorsement.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.update_endorse_progress", "modulename": "gui", "qualname": "MainWindow.update_endorse_progress", "kind": "function", "doc": "<p>Update the endorsement progress bar.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The progress percentage to update.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.set_endorse_progress", "modulename": "gui", "qualname": "MainWindow.set_endorse_progress", "kind": "function", "doc": "<p>Set the endorsement progress bar to a specific value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The progress percentage to set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "gui.MainWindow.closeEvent", "modulename": "gui", "qualname": "MainWindow.closeEvent", "kind": "function", "doc": "<p>Handle the window close event, ensuring that running threads are properly handled.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>event (QCloseEvent):</strong>  The close event.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">PyQt6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QCloseEvent</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();